import org.jfree.data.xy.XYSeries;
import ij.measure.ResultsTable;

img = ij.IJ.getImage();
ij.ImageStack stack = img.getImageStack();
XYSeries data = new XYSeries("");
ResultsTable rt = new ResultsTable();
rt.reset();

for (int i=0; i <stack.getSize()/2; i++) {
	ip = stack.getProcessor(2*i + 1);
	ij.process.ImageStatistics stats = ip.getStatistics();
	stdDev = stats.stdDev;
	rt.incrementCounter();
	rt.addValue("Signal DN", stats.mean);
	rt.addValue("Noise DN", stdDev);
	
	if (i>0) {	
		rt.addValue("Slope of Log", ( (Math.log(stdDev) - Math.log(data.getY(i-1))) / (Math.log(stats.mean) - Math.log(data.getX(i-1)))));
		rt.addValue("PCF", stats.mean/(stdDev*stdDev));
	}
	gui.message("Processing: " + i);
	data.add(stats.mean, stats.stdDev);
}

t = "Photon Transfer Data (fpn) -" + img.getTitle();
rt.show(t);
plotData("Photon Transfer Curve (fpn) -" + img.getTitle(), data, "Signal DN", "Noise DN", 100, 100, true, true);