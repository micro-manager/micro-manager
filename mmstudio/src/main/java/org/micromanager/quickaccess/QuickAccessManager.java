///////////////////////////////////////////////////////////////////////////////
//PROJECT:       Micro-Manager
//-----------------------------------------------------------------------------
//
// AUTHOR:       Chris Weisiger, 2015
//
// COPYRIGHT:    University of California, San Francisco, 2015
//
// LICENSE:      This file is distributed under the BSD license.
//               License text is included with the source distribution.
//
//               This file is distributed in the hope that it will be useful,
//               but WITHOUT ANY WARRANTY; without even the implied warranty
//               of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//
//               IN NO EVENT SHALL THE COPYRIGHT OWNER OR
//               CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//               INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES.

package org.micromanager.quickaccess;

import java.io.File;

import java.util.Map;

import javax.swing.Icon;
import javax.swing.JFrame;

import org.micromanager.PropertyMap;

/**
 * The QuickAccessManager provides API access to the Quick Access Panel(s).
 * It can accessed via Studio.quick() or Studio.getQuickAccessManager().
 */
public interface QuickAccessManager {
   /**
    * Show the Quick Access Panels. This loads all saved information in the
    * user's profile relating to Quick Access Panels and ensures all such
    * panels are visible. If there is no saved information in the profile, then
    * a new, blank panel will be created.
    */
   public void showPanels();

   /**
    * Retrieve a mapping of Quick Access Panel titles to the panels themselves.
    */
   public Map<String, JFrame> getPanels();

   /**
    * Generate an Icon based on information contained in the provided
    * PropertyMap. This method should be used by WidgetPlugins that support
    * customizable icons (i.e. their getCanCustomizeIcon() method returns true)
    * to insert the custom icon into their UI. Note that just because the UI
    * *can* have a custom icon does not necessarily mean that it *will* have
    * a custom icon; in such situations this method will return the
    * defaultIcon value instead.
    * @param config A PropertyMap potentially containing information about
    *        user-customized icons.
    * @param defaultIcon Icon to use if no custom icon information is set.
    * @return A custom Icon derived from the PropertyMap, or the defaultIcon
    *         if no icon information is available.
    */
   public Icon getCustomIcon(PropertyMap config, Icon defaultIcon);

   /**
    * Save the Quick Access Panel settings to a file, so they may be
    * transferred between users or to another system. Please note that some
    * widgets in the Quick Access Panel may be hardware-specific or rely on
    * files accessible to the current user; these widgets may not work on
    * different systems.
    * @param file File to which settings should be saved.
    */
   public void saveSettingsToFile(File file);

   /**
    * Load a settings file as generated by saveSettingsToFile(). This will
    * create new Quick Access Panels as needed and populate them with the
    * widgets described in the file. Please note that some widgets in the Quick
    * Access Panel may be hardware-specific or rely on files accessible to the
    * current user; these widgets may not work on different systems.
    * @param file File from which settings should be loaded.
    */
   public void loadSettingsFromFile(File file);
}
