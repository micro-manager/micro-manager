package de.embl.rieslab.emu.plugin.examples.laserui;

import de.embl.rieslab.emu.ui.ConfigurablePanel;
import de.embl.rieslab.emu.ui.swinglisteners.SwingUIListeners;
import de.embl.rieslab.emu.ui.uiparameters.ColorUIParameter;
import de.embl.rieslab.emu.ui.uiparameters.StringUIParameter;
import de.embl.rieslab.emu.ui.uiproperties.UIProperty;
import de.embl.rieslab.emu.ui.uiproperties.flag.NoFlag;
import de.embl.rieslab.emu.utils.EmuUtils;
import de.embl.rieslab.emu.utils.exceptions.IncorrectUIParameterTypeException;
import de.embl.rieslab.emu.utils.exceptions.UnknownUIParameterException;
import de.embl.rieslab.emu.utils.exceptions.UnknownUIPropertyException;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Dictionary;
import java.util.Hashtable;
import javax.swing.JLabel;
import javax.swing.JSlider;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeListener;
import org.micromanager.internal.utils.NumberUtils;

/**
 * Creates the UI components for one laser, i.e. the slider and text box to set
 * the desired output value.
 */
public class LaserPanel extends ConfigurablePanel {
   private static final long serialVersionUID = 1L;
   //////// Properties
   public static final String POWER_MW = "power(mW)";
   //////// Parameters
   public static final String PARAM_TITLE = "Name";
   public static final String PARAM_COLOR = "Color";
   private JTextField textField;
   private JSlider slider;

   /**
    * Creates the panel for one laser, i.e. the slider and text input box to set
    * the desired output in mW.
    *
    * @param title Shown to the user
    */
   public LaserPanel(String title) {
      super(title);

      initComponents();
   }

   // This function was generated by the Eclipse WindowBuilder.
   private void initComponents() {
      setBorder(new TitledBorder(null, "Laser",
            TitledBorder.LEFT, TitledBorder.TOP, null, null));

      // except this bit: make the font bold in the titledborder title
      ((TitledBorder) this.getBorder()).setTitleFont(
            ((TitledBorder) this.getBorder()).getTitleFont().deriveFont(Font.BOLD, 12));

      setLayout(null);

      slider = new JSlider();
      slider.setBounds(10, 20, 60, 172);
      slider.setMajorTickSpacing(20);
      slider.setPaintTicks(true);
      slider.setPaintLabels(true);
      slider.setOrientation(SwingConstants.VERTICAL);
      add(slider);

      textField = new JTextField("0.0");
      textField.setBounds(10, 200, 60, 20);
      textField.setFont(new Font("Tahoma", Font.BOLD, 12));
      textField.setHorizontalAlignment(SwingConstants.CENTER);
      add(textField);

      JLabel label = new JLabel("mW");
      label.setBounds(10, 225, 60, 20);
      label.setFont(new Font("Tahoma", Font.BOLD, 12));
      label.setHorizontalAlignment(SwingConstants.CENTER);
      add(label);

   }

   private String getUIPropertyLabel(String property) {
      return getPanelLabel() + " " + property;
   }

   @Override
   protected void initializeProperties() {
      /*
       * In this method, we need to declare the UIProperties and
       * add them to the ConfigurableFrame using the method
       * ConfigurableFrame.addUIProperty(UIProperty).
       */

      UIProperty powerProperty = new UIProperty(this,
            getUIPropertyLabel(POWER_MW), "Power of the laser in mW", new NoFlag());
      addUIProperty(powerProperty);
   }

   @Override
   protected void initializeInternalProperties() {
      /*
       * In this method, we can declare the InternalProperties
       * and add them to the ConfigurableFrame using the method
       * ConfigurableFrame.addInternalProperty(InternalProperty).
       */

      // In this example, we have none.
   }

   @Override
   protected void initializeParameters() {
      /*
       * We retrieve the panel label (defined in the SimpleUIFrame) to set the default
       * of the StringUIParameter corresponding to the title parameter.
       */
      addUIParameter(new StringUIParameter(this, PARAM_TITLE, "Panel title.", getPanelLabel()));

      // We declare a ColorUIParameter for the title color (with default being black)
      addUIParameter(new ColorUIParameter(this, PARAM_COLOR, "Panel title color.", Color.black));
   }

   @Override
   protected void addComponentListeners() {
      /*
       * In this method we can add Swing actionListeners to the
       * JComponents or call the methods from SwingUIListeners.
       */

      // The JSlider and the JTextField will update the UIProperty, as well as each other
      UIProperty powerProperty = null;
      try {
         powerProperty = getUIProperty(getUIPropertyLabel(POWER_MW));
      } catch (UnknownUIPropertyException e) {
         e.printStackTrace();
      }
      if (powerProperty != null && powerProperty.hasMMPropertyLimits()) {
         String[] limits = powerProperty.getLimits();
         double min = Double.parseDouble(limits[0]);
         double max = Double.parseDouble(limits[1]);
         Hashtable labelTable = new Hashtable();
         double increment = (max - min) / 5;
         for (int i = 0; i <= 6; i++) {
            labelTable.put(new Integer(i * 20),
                  new JLabel(NumberUtils.doubleToDisplayString(i * increment + min)));
         }
         slider.setLabelTable(labelTable);

         addActionListenerOnDoubleValue(this, getUIPropertyLabel(POWER_MW),
               textField, slider, min, max);
         addListenerOnDoubleValue(this, getUIPropertyLabel(POWER_MW),
               slider, textField, min, max);
      } else {
         SwingUIListeners.addActionListenerOnDoubleValue(this, getUIPropertyLabel(POWER_MW),
               textField);
      }
   }

   @Override
   public void internalpropertyhasChanged(String propertyName) {
      /*
       * This method is called when an InternalProperty has changed.
       * Here we can modify the UI to reflect this change.
       */

      // Here, we do not have to do anything.
   }

   @Override
   protected void propertyhasChanged(String propertyName, String newValue) {
      /*
       * This method is called when an UIProperty has changed.
       * Here we can modify the UI to reflect this change.
       */

      if (getUIPropertyLabel(POWER_MW).equals(propertyName)) {
         // if the change concerns the laser power
         // Let's test if the value is a number
         if (EmuUtils.isNumeric(newValue)) {
            textField.setText(newValue);
            UIProperty powerProperty = null;
            try {
               powerProperty = getUIProperty(getUIPropertyLabel(POWER_MW));
            } catch (UnknownUIPropertyException e) {
               e.printStackTrace();
            }
            if (powerProperty != null && powerProperty.hasMMPropertyLimits()) {
               String[] limits = powerProperty.getLimits();
               double min = Double.parseDouble(limits[0]);
               double max = Double.parseDouble(limits[1]);
               takeAction(this, getUIPropertyLabel(POWER_MW), textField, slider, min, max);
            }
         }
      }
   }

   @Override
   protected void parameterhasChanged(String parameterName) {
      /*
       * This method is called when a UIParameter has changed.
       * Here we can modify the UI to reflect this change. It
       * is only called when the plugin is loaded or the configuration
       * changed.
       */

      if (PARAM_TITLE.equals(parameterName)) {
         try {
            // retrieves the title as a String
            String title = getStringUIParameterValue(PARAM_TITLE);

            // gets the TitledBorder and change its title, then updates the panel
            TitledBorder border = (TitledBorder) this.getBorder();
            border.setTitle(title);
            this.repaint();

         } catch (UnknownUIParameterException e) {
            e.printStackTrace();
         }
      } else if (PARAM_COLOR.equals(parameterName)) {
         try {
            // retrieves the color at a Color type
            Color color = getColorUIParameterValue(PARAM_COLOR);

            // gets the TitledBorder and change its title color, then updates the panel
            TitledBorder border = (TitledBorder) this.getBorder();
            border.setTitleColor(color);
            this.repaint();
         } catch (IncorrectUIParameterTypeException | UnknownUIParameterException e) {
            e.printStackTrace();
         }
      }
   }

   @Override
   public void shutDown() {
      /*
       * This method is called upon closing the plugin and can be
       * used to reset some properties or stop running threads.
       */

      // Here do nothing.
   }

   @Override
   public String getDescription() {
      /*
       * Here, we return the description of the ConfigurablePanel,
       * this description is used to help the user understand how the
       * panel works.
       */
      return
            // TODO expand once the linearizer utility device is finished/
            "Laser panels each control the power of a single laser. ";
   }


   /**
    * Adds a Swing action listener to a JSlider.
    * Updates the given TextField with the value.
    *
    * @param cp          ConfigurablePanel that owns the UIProperty {@code propertyKey}
    * @param propertyKey Label of the UIProperty to update.
    * @param slider      JSlider.
    */
   public static void addListenerOnDoubleValue(final ConfigurablePanel cp,
                                               final String propertyKey, final JSlider slider,
                                               final JTextField textField,
                                               final double min, final double max) {
      if (propertyKey == null) {
         throw new NullPointerException("The UIProperty's label cannot be null.");
      }
      if (slider == null) {
         throw new NullPointerException("The JSlider cannot be null.");
      }

      slider.addMouseListener(new MouseAdapter() {
         public void mouseReleased(MouseEvent e) {
            int val = slider.getValue();
            // translate the integer value to values of the property
            double ratio = (double) (val - slider.getMinimum())
                  / (double) (slider.getMaximum() - slider.getMinimum());
            double propValue = ratio * (max - min) + min;
            cp.setUIPropertyValue(propertyKey, NumberUtils.doubleToDisplayString(propValue));
            textField.setText(NumberUtils.doubleToDisplayString(propValue));
         }
      });
   }


   /**
    * Adds a Swing action listener to a JTextField value, causing the UIProperty
    * {@code propertyKey} from {@code cp} to be updated with the JTextField (double) value within
    * an allowed range defined by {@code min} and {@code max}. Non-double values are ignored.
    * Also updates the value of the associated JSlider.
    *
    * @param cp          ConfigurablePanel that owns the UIProperty {@code propertyKey}
    * @param propertyKey Label of the UIProperty to update.
    * @param textField   JTextField.
    * @param slider      Slider whose position will be updated
    * @param min         Minimum accepted value.
    * @param max         Maximum accepted value.
    */
   public static void addActionListenerOnDoubleValue(final ConfigurablePanel cp,
                                                     final String propertyKey,
                                                     final JTextField textField,
                                                     final JSlider slider,
                                                     double min,
                                                     double max) {
      if (cp == null) {
         throw new NullPointerException("The ConfigurablePanel cannot be null.");
      }
      if (propertyKey == null) {
         throw new NullPointerException("The UIProperty's label cannot be null.");
      }
      if (textField == null) {
         throw new NullPointerException("The JTextField cannot be null.");
      }

      textField.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            takeAction(cp, propertyKey, textField, slider, min, max);
         }
      });

      textField.addFocusListener(new FocusListener() {
         @Override
         public void focusGained(FocusEvent ex) {
         }

         @Override
         public void focusLost(FocusEvent ex) {
            takeAction(cp, propertyKey, textField, slider, min, max);
         }
      });
   }


   /**
    * Updates slider with the value of the TextField.
    *
    * @param cp Parent panel
    * @param propertyKey propertyKey
    * @param textField TextField providing the value
    * @param slider Slider to be updated
    * @param min Minimum value of the property
    * @param max Maximum vaue of the property
    */
   public static void takeAction(final ConfigurablePanel cp,
                                 final String propertyKey,
                                 JTextField textField,
                                 JSlider slider,
                                 double min,
                                 double max) {
      String s = textField.getText().replaceAll(",", ".");
      if (EmuUtils.isNumeric(s)) {
         double val = Double.parseDouble(s);
         if (val < min) {
            val = min;
         } else if (val > max) {
            val = max;
         }
         cp.setUIPropertyValue(propertyKey, s);
         textField.setText(NumberUtils.doubleToDisplayString(val));
         double ratio = (double) (val - min) / (double) (max - min);
         int sliderValue = (int) (ratio * (double) (slider.getMaximum() - slider.getMinimum())
               + slider.getMinimum());
         slider.setValue(sliderValue);
      }
   }
}