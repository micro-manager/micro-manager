package de.embl.rieslab.emu.plugin.examples.simpleui;

import java.awt.GridLayout;
import java.util.HashMap;
import java.util.TreeMap;

import javax.swing.JPanel;

import de.embl.rieslab.emu.controller.SystemController;
import de.embl.rieslab.emu.ui.ConfigurableMainFrame;
import de.embl.rieslab.emu.utils.settings.BoolSetting;
import de.embl.rieslab.emu.utils.settings.Setting;

public class SimpleUIFrame extends ConfigurableMainFrame {

  private static final long serialVersionUID = 1L;

  // Plugin setting for an optional filterwheel panel
  public final String SETTING_USE_FW = "Use FW";

  public SimpleUIFrame(String arg0, SystemController arg1, TreeMap<String, String> arg2) {
    super(arg0, arg1, arg2);
  }

  @Override
  protected void initComponents() {
    /*
     * Code generated by Eclipse WindowBuilder
     */
    setBounds(100, 100, 510, 414);
    getContentPane().setLayout(null);

    JPanel panel = new JPanel();
    panel.setBounds(10, 11, 474, 275);
    getContentPane().add(panel);
    panel.setLayout(new GridLayout(1, 0, 0, 0));

    LaserPanel laserPanel = new LaserPanel("Laser0");
    panel.add(laserPanel);

    LaserPanel laserPanel_1 = new LaserPanel("Laser1");
    panel.add(laserPanel_1);

    LaserPanel laserPanel_2 = new LaserPanel("Laser2");
    panel.add(laserPanel_2);

    LaserPanel laserPanel_3 = new LaserPanel("Laser3");
    panel.add(laserPanel_3);

    /*
     * Checks the plugin setting for the optional filter wheel.
     */
    if (((BoolSetting) this.getCurrentPluginSettings().get(SETTING_USE_FW)).getValue()) {
      // adds the filter wheel panel
      FilterWheelPanel filtersPanel = new FilterWheelPanel("Filters");
      filtersPanel.setBounds(10, 297, 474, 54);
      getContentPane().add(filtersPanel);
    }
  }

  @Override
  public HashMap<String, Setting> getDefaultPluginSettings() {
    /*
     * In this method, declare a HashMap<String, Setting> and then add any useful
     * plugin setting. These will allow the user to configure options related to the
     * ConfigurablePanels, such as number of panels, names or enabling / disabling.
     */

    HashMap<String, Setting> settgs = new HashMap<String, Setting>();

    // Here, we create an enable/disable option for the filterwheel panel.
    settgs.put(
        SETTING_USE_FW, new BoolSetting(SETTING_USE_FW, "Enable/disable the filter wheel.", true));
    return settgs;
  }

  @Override
  protected String getPluginInfo() {
    return "The SimpleUI was developed by Joran Deschamps, EMBL (2019), as an example for EMU. It controls four lasers and"
        + " an optional filterwheel.";
  }
}
